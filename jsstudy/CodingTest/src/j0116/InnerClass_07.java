package j0116;
/*
 * 내부클래스(innerclass) ?
 * - 하나의 클래스 내부에 선언된 또 다른 클래스 의미 (내부에 정의)
 * 보통 2개의 클래스가 서로 긴밀한 관계 or 하나의 클래스 또는 메소드에서만 사용되는 클래스 일때 사용
 * 내부클래스는 중첩 클래스로 분류
 * 
 * <장점>
 * 1. 클래스를 논리적으로 그룹화 가능 _ 패키지 간소화
 * 2. 캡슐화의 적용 _ private 제어자를 적용해줌으로써, 캡슐화를 통해 클래스를 내부로 숨길 수 있음.
 * 3. 가독성이 좋고 유지관리가 쉬움 _ 직관적으로 사용 가능
 * 
 * <종류>
 * 1. 인스턴스 클래스 (instance class) _ 외부클래스의 멤버변수 선언 치에 선언, 인스턴스멤버처럼 다뤄짐
 * -> 클래스 내부에는 인스턴스 멤버만 선언(static 멤버 선언불가)
 * -> 인스턴스 클래스 컴파일은 $ 붙음.
 * -> 주로 외부클래스의 인스턴스 멤버들과 관련된 작업에 사용될 목적으로 선언
 * 
 * 2. **스태틱 클래스(static class) _ 외부 클래스 static멤버 처럼 다뤄짐, 주의점은 new 생성자를 초기화를 못하는건 아님
 * -> 클래스 내부에는 인스턴스 멤버와 스태틱 멤버 모두 선언 가능
 * -> static내부 클래스는 같은 static이지만 메모리 구조나 기능이 다름(static 필드 변수나 메서드 등과)
 * -> 외부 클래스의 인스턴스 멤버에게는 접근 불가능, 정적(static)멤버에만 접근 가능!
 * 
 * 3. 지역 클래스(local class) _ 외부 클래스의 메서드나 초기화 블럭 안에 선언 / 선언된 메서드 블록 영역 내부에서만 사용 가능
 * -> 지역변수처럼 해당 메서드 내부에서만 한정적 사용 
 * -> 접근제한자와 static을 붙일 수 없음
 * -> 메서드 내의 지역 변수에 접근해서 값을 사용하려 하면 반드시 final 상수화된  지역 변수만 사용 가능
 * -> JDK1.8부터 지역클래스에 접근하는 지역변수 앞에 FINAL 생략 가능 (자동으로 붙여줌)
 * 
 * 4. **익명 클래스(anonymous class) -> 클래스 선언과 객체의 생성을 동시에하는 이름없는 클래스
 * -> 주로 클래스를 일회용으로 사용할 때 자주 사용
 * -> 클래스의 선언과 동시에 객체를 생성
 * -> 생성자 존재하지 않음
 * 
 */
/////////////////////////////////////////////////////////////////////

class OuterObj {
	
	public void disp() {
		System.out.println("외부 클래스의 disp 메서드");
		System.out.println("외부에서 내부클래스의 write 메서드 호출");
		
		//클래스 생성 해서 메서드 호출
		ineerObj inObj = new ineerObj();
		inObj.write(); //내부 클래스에서는 외부클래스를 통해 호출해서 출력 가능.
	}
	/////////////////////////////////////
	class ineerObj {
		public void write() {
			System.out.println("내부 클래스의 wirte메서드");
		}
	}
	
}

public class InnerClass_07 { //0116_04

	public static void main(String[] args) {
		// 내부 클래스를 외부 클래스를 통해 내부, 외부 내용 같이 출력
		
		OuterObj outerObj = new OuterObj();
		outerObj.disp(); //외부클래스 안에 메소드 입력 값
		System.out.println("----------------------------------------");
		
		//내부 클래스는 외부 통해서만 생성가능(내부 클래스에 있는 내용만 추출하고 싶은 경우)
		OuterObj.ineerObj obj = new OuterObj(). new ineerObj(); //생성된게 없으면 사용 외부클래스 명 / 내부클래스 명
		//OuterObj.ineerObj obj = outerObj.new ineerObj(); //생성된게 있으면 outerObj!!!!!
		obj.write();

	}

}
